def point_containment(self, point):
      faces = []
      for i in self.cells:
          if i.type == 2:
              faces.append(i)

      for i in faces:
          boundary = i.boundary_defn
          count = 0
          bound_det = self.get_map_data(i.map_id)
          point_on_plane = bound_det[0]
          norm = np.cross(bound_det[1], bound_det[2])
          print point_on_plane, norm

          if np.dot(point, norm) - np.dot(norm,point_on_plane ) == 0.01:
              print "Not in plane"
          else:
              for j in boundary:
                  for k in j:
                      points = k.boundary_defn
                      p1 = points[0]
                      p2 = points[1]
                      p1 = self.get_map_data(p1.map_id)[0]
                      p2 = self.get_map_data(p2.map_id)[0]
                      print p1, p2
                      u = [point[i] - p1[i] for i in range(0,3)]
                      print u
                      v = np.dot(u, [p1[i] - p2[i] for i in range(3)])
                      print v
                      final = [v * u[i] for i in range(3)]
                      print "Final: ",
                      print final
                      dire = np.cross(final, [p1[i] - p2[i] for i in range(3)])
                      print dire

                      import math

                      def length(v):
                          return math.sqrt(np.dot(v, v))
                      def unit_vector(vector):
                          """ Returns the unit vector of the vector.  """
                          return vector / np.linalg.norm(vector)

                      #angle = math.acos(np.dot(dire, norm)/(length(dire)* length(norm)))
                      def angle_between(v1, v2):
                          """ Returns the angle in radians between vectors 'v1' and 'v2'::

                                  >>> angle_between((1, 0, 0), (0, 1, 0))
                                  1.5707963267948966
                                  >>> angle_between((1, 0, 0), (1, 0, 0))
                                  0.0
                                  >>> angle_between((1, 0, 0), (-1, 0, 0))
                                  3.141592653589793
                          """
                          v1_u = unit_vector(v1)
                          v2_u = unit_vector(v2)
                          return np.arccos(np.clip(np.dot(v1_u, v2_u), -1.0, 1.0))

                      print "ANGLE: ", angle_between(dire, norm)
              print count
